name: Deploy to ECS
on:
  workflow_run:
    workflows: ["Build ML Container Image"]
    types:
      - completed
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (leave empty to use latest build)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_ECS_DEFINITION_FAMILY: fastapi-ml-service-fargate
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: ${{ startsWith(github.ref, 'refs/tags/v') && 'production' || 'develop' }}
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-session
      
      - name: Login to Amazon ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Use manually specified image tag
        id: manual-image
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.image_tag != ''
        run: |
          REGISTRY=$(aws ecr describe-repositories --repository-names uai/serving-ml-model --query 'repositories[0].repositoryUri' --output text | sed 's|/.*||')
          REPOSITORY="uai/serving-ml-model"
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          IMAGE="$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "Using manually specified image: $IMAGE"


      - name: Download task definition
        run: |
          if ! aws ecs describe-task-definition \
            --task-definition ${{ env.AWS_ECS_DEFINITION_FAMILY }} \
            --query taskDefinition > task-definition.json; then
            echo "Failed to download task definition"
            exit 1
          fi
          
          # Verify the file exists and has content
          if [ ! -s task-definition.json ]; then
            echo "Task definition file is empty or does not exist"
            exit 1
          fi
          
          echo "Task definition downloaded successfully"
          cat task-definition.json

      - name: Fill in new image ID in task definition
        id: render-ml-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json 
          container-name: ml-service
          image: ${{ steps.set-image.outputs.image }}
          environment-variables: |
            LOG_LEVEL=info
            ENVIRONMENT=${{ startsWith(github.ref, 'refs/tags/v') && 'production' || 'dev' }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-ml-container.outputs.task-definition }}
          service: ${{ secrets.AWS_ECS_SERVICE }}
          cluster: ${{ secrets.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Post-deployment verification
        run: |
          echo "Deployment completed successfully"
          aws ecs describe-services \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --services ${{ secrets.AWS_ECS_SERVICE }} \
            --query 'services[0].deployments[0].status'